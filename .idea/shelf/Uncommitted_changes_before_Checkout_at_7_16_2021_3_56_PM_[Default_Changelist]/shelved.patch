Index: app/src/main/java/com/example/newsapp/ui/headline/BusinessFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.newsapp.ui.headline\r\n\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout\r\nimport com.example.newsapp.R\r\nimport com.example.newsapp.adapters.HeadlineBindingAdapter\r\nimport com.example.newsapp.utils.SourcePlanning\r\nimport com.example.newsapp.viewmodels.HeadlineViewModel\r\nimport com.example.newsapp.viewmodels.WebViewModel\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport javax.inject.Inject\r\n\r\n@AndroidEntryPoint\r\nclass BusinessFragment : Fragment(R.layout.fragment_business) {\r\n\r\n    @Inject\r\n    lateinit var headlineViewModel: HeadlineViewModel\r\n\r\n    @Inject\r\n    lateinit var sourcePlanning: SourcePlanning\r\n\r\n    @Inject\r\n    lateinit var webViewModel: WebViewModel\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        val recyclerView = view.findViewById<RecyclerView>(R.id.businessRecyclerView)\r\n        val swipeRefreshLayout = view.findViewById<SwipeRefreshLayout>(R.id.business_layout_swipe_to_refresh)\r\n        swipeRefreshLayout.setOnRefreshListener {\r\n            headlineViewModel.deleteHeadline(sourcePlanning.businessSources)\r\n            headlineViewModel.fetchBusiness()\r\n        }\r\n        headlineViewModel.fetchBusiness()\r\n        headlineViewModel.businessData.observe(viewLifecycleOwner, { resource ->\r\n            HeadlineBindingAdapter(this, webViewModel)\r\n                .bindHeadline(resource, recyclerView, swipeRefreshLayout)\r\n        })\r\n\r\n        view.findViewById<FloatingActionButton>(R.id.business_fab).setOnClickListener {\r\n            headlineViewModel.deleteHeadline(sourcePlanning.businessSources)\r\n            headlineViewModel.fetchBusiness()\r\n            headlineViewModel.businessData.observe(viewLifecycleOwner, { resource ->\r\n                HeadlineBindingAdapter(this, webViewModel)\r\n                    .bindHeadline(resource, recyclerView, swipeRefreshLayout)\r\n            })\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/newsapp/ui/headline/BusinessFragment.kt	(revision 533c7dc324a15d40f7b0d904354c3fa94792d35e)
+++ app/src/main/java/com/example/newsapp/ui/headline/BusinessFragment.kt	(date 1626368380322)
@@ -1,6 +1,7 @@
 package com.example.newsapp.ui.headline
 
 import android.os.Bundle
+import android.util.Log
 import androidx.fragment.app.Fragment
 import android.view.View
 import android.widget.Button
@@ -32,7 +33,6 @@
         val recyclerView = view.findViewById<RecyclerView>(R.id.businessRecyclerView)
         val swipeRefreshLayout = view.findViewById<SwipeRefreshLayout>(R.id.business_layout_swipe_to_refresh)
         swipeRefreshLayout.setOnRefreshListener {
-            headlineViewModel.deleteHeadline(sourcePlanning.businessSources)
             headlineViewModel.fetchBusiness()
         }
         headlineViewModel.fetchBusiness()
@@ -44,10 +44,6 @@
         view.findViewById<FloatingActionButton>(R.id.business_fab).setOnClickListener {
             headlineViewModel.deleteHeadline(sourcePlanning.businessSources)
             headlineViewModel.fetchBusiness()
-            headlineViewModel.businessData.observe(viewLifecycleOwner, { resource ->
-                HeadlineBindingAdapter(this, webViewModel)
-                    .bindHeadline(resource, recyclerView, swipeRefreshLayout)
-            })
         }
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/newsapp/data/remote/ArticleRemoteDataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.newsapp.data.remote\r\n\r\nimport com.example.newsapp.data.models.ApiResponse\r\nimport com.example.newsapp.utils.Resource\r\nimport javax.inject.Inject\r\n\r\nclass ArticleRemoteDataSource @Inject constructor(\r\n    private val articleService: ArticleService\r\n): BaseRemoteDataSource() {\r\n\r\n    //private val API_KEY: String = \"72c24663e06140ae915f4a103374c000\"\r\n    private val API_KEY: String = \"40c0eda347094331862d35f3bcc45da8\"\r\n\r\n    suspend fun getArticleBySource(source: String) = getResult {\r\n        articleService.getNewsBySource(source, API_KEY) }\r\n\r\n    suspend fun getFromMultiSources(sources: List<String>): List<Resource<ApiResponse>> {\r\n        val result = mutableListOf<Resource<ApiResponse>>()\r\n        sources.forEach { id ->\r\n            getResult2(id) { articleService.getNewsBySource(id, API_KEY) }.also { result.add(it) }\r\n        }\r\n        return result\r\n    }\r\n\r\n    suspend fun getForMultiTags(tags: List<String>): List<Resource<ApiResponse>> {\r\n        val result = mutableListOf<Resource<ApiResponse>>()\r\n        tags.forEach { q ->\r\n            getResult2(q) { articleService.getNewsByTag(q, API_KEY) }.also { result.add(it) }\r\n        }\r\n        return result\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/newsapp/data/remote/ArticleRemoteDataSource.kt	(revision 533c7dc324a15d40f7b0d904354c3fa94792d35e)
+++ app/src/main/java/com/example/newsapp/data/remote/ArticleRemoteDataSource.kt	(date 1626367338605)
@@ -1,5 +1,6 @@
 package com.example.newsapp.data.remote
 
+import android.util.Log
 import com.example.newsapp.data.models.ApiResponse
 import com.example.newsapp.utils.Resource
 import javax.inject.Inject
@@ -8,8 +9,8 @@
     private val articleService: ArticleService
 ): BaseRemoteDataSource() {
 
-    //private val API_KEY: String = "72c24663e06140ae915f4a103374c000"
-    private val API_KEY: String = "40c0eda347094331862d35f3bcc45da8"
+    private val API_KEY: String = "72c24663e06140ae915f4a103374c000"
+    //private val API_KEY: String = "40c0eda347094331862d35f3bcc45da8"
 
     suspend fun getArticleBySource(source: String) = getResult {
         articleService.getNewsBySource(source, API_KEY) }
@@ -19,6 +20,7 @@
         sources.forEach { id ->
             getResult2(id) { articleService.getNewsBySource(id, API_KEY) }.also { result.add(it) }
         }
+        Log.d("ArticleRemoteDataSource", result.toString())
         return result
     }
 
Index: app/src/main/java/com/example/newsapp/viewmodels/HeadlineViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.newsapp.viewmodels\r\n\r\nimport androidx.lifecycle.*\r\nimport com.example.newsapp.data.models.Article\r\nimport com.example.newsapp.data.repositories.HeadlineRepository\r\nimport com.example.newsapp.data.repositories.HomeRepository\r\nimport com.example.newsapp.utils.Resource\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.launch\r\nimport javax.inject.Inject\r\n\r\nclass HeadlineViewModel @Inject constructor(\r\n    private val headlineRepository: HeadlineRepository\r\n) : ViewModel() {\r\n\r\n    lateinit var businessData: LiveData<Resource<List<Article>>>\r\n    lateinit var techData    : LiveData<Resource<List<Article>>>\r\n    lateinit var startupData : LiveData<Resource<List<Article>>>\r\n    lateinit var scienceData : LiveData<Resource<List<Article>>>\r\n    lateinit var lifeData    : LiveData<Resource<List<Article>>>\r\n\r\n    fun deleteHeadline(tags: List<String>) {\r\n        viewModelScope.launch {\r\n            headlineRepository.deleteByTags(tags)\r\n        }\r\n    }\r\n\r\n    fun fetchBusiness() {\r\n        businessData = headlineRepository.getBusinessHeadline()\r\n            .asLiveData(viewModelScope.coroutineContext)\r\n    }\r\n\r\n    fun fetchTech() {\r\n         techData = headlineRepository.getTechHeadline()\r\n            .asLiveData(viewModelScope.coroutineContext)\r\n    }\r\n\r\n    fun fetchStartup() {\r\n        startupData = headlineRepository.getStartupHeadline()\r\n            .asLiveData(viewModelScope.coroutineContext)\r\n    }\r\n\r\n    fun fetchScience() {\r\n        scienceData = headlineRepository.getScienceHeadline()\r\n            .asLiveData(viewModelScope.coroutineContext)\r\n    }\r\n\r\n    fun fetchLife() {\r\n        lifeData = headlineRepository.getLifeHeadline()\r\n            .asLiveData(viewModelScope.coroutineContext)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/newsapp/viewmodels/HeadlineViewModel.kt	(revision 533c7dc324a15d40f7b0d904354c3fa94792d35e)
+++ app/src/main/java/com/example/newsapp/viewmodels/HeadlineViewModel.kt	(date 1626367459672)
@@ -1,5 +1,6 @@
 package com.example.newsapp.viewmodels
 
+import android.util.Log
 import androidx.lifecycle.*
 import com.example.newsapp.data.models.Article
 import com.example.newsapp.data.repositories.HeadlineRepository
@@ -26,6 +27,7 @@
     }
 
     fun fetchBusiness() {
+        Log.d("fetchBusiness", "call fetchBusiness")
         businessData = headlineRepository.getBusinessHeadline()
             .asLiveData(viewModelScope.coroutineContext)
     }
Index: app/src/main/java/com/example/newsapp/adapters/HeadlineBindingAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.newsapp.adapters\r\n\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.navigation.Navigation\r\nimport androidx.recyclerview.widget.DividerItemDecoration\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout\r\nimport com.example.newsapp.R\r\nimport com.example.newsapp.data.models.Article\r\nimport com.example.newsapp.utils.Resource\r\nimport com.example.newsapp.viewmodels.WebViewModel\r\n\r\nclass HeadlineBindingAdapter (\r\n    val fragment: Fragment,\r\n    val webViewModel: WebViewModel\r\n) {\r\n\r\n    fun bindHeadline(resource: Resource<List<Article>>, recyclerView: RecyclerView, swipeRefreshLayout: SwipeRefreshLayout) {\r\n        when (resource) {\r\n            is Resource.Loading -> {\r\n                Toast.makeText(recyclerView.context, \"Loading...\", Toast.LENGTH_LONG).show()\r\n            }\r\n\r\n            is Resource.Error -> {\r\n                Toast.makeText(recyclerView.context, \"Error\", Toast.LENGTH_LONG).show()\r\n            }\r\n\r\n            is Resource.Success -> {\r\n                swipeRefreshLayout.isRefreshing = false\r\n                recyclerView.apply {\r\n                    layoutManager = LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false)\r\n                        .apply { initialPrefetchItemCount = 6 }\r\n                    adapter = HeadlineRecyclerViewAdapter(resource.data){\r\n                        onItemClick(it)\r\n                    }\r\n                    hasFixedSize()\r\n                    addItemDecoration(DividerItemDecoration(context, LinearLayoutManager.VERTICAL))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun onItemClick(article: Article){\r\n        webViewModel.setViewData(article)\r\n        val mainNavController = Navigation.findNavController(fragment.requireActivity(), R.id.nav_host_fragment_container)\r\n        mainNavController.navigate(R.id.action_global_to_webViewFragment)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/newsapp/adapters/HeadlineBindingAdapter.kt	(revision 533c7dc324a15d40f7b0d904354c3fa94792d35e)
+++ app/src/main/java/com/example/newsapp/adapters/HeadlineBindingAdapter.kt	(date 1626365224269)
@@ -1,5 +1,6 @@
 package com.example.newsapp.adapters
 
+import android.util.Log
 import android.widget.Toast
 import androidx.fragment.app.Fragment
 import androidx.navigation.Navigation
@@ -28,7 +29,6 @@
             }
 
             is Resource.Success -> {
-                swipeRefreshLayout.isRefreshing = false
                 recyclerView.apply {
                     layoutManager = LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false)
                         .apply { initialPrefetchItemCount = 6 }
@@ -42,6 +42,28 @@
         }
     }
 
+    fun refreshData(resource: Resource<List<Article>>, recyclerView: RecyclerView, swipeRefreshLayout: SwipeRefreshLayout) {
+        when (resource) {
+            is Resource.Loading -> {
+                Toast.makeText(recyclerView.context, "Loading...", Toast.LENGTH_LONG).show()
+            }
+
+            is Resource.Error -> {
+                Toast.makeText(recyclerView.context, "Error", Toast.LENGTH_LONG).show()
+            }
+
+            is Resource.Success -> {
+                swipeRefreshLayout.isRefreshing = false
+                Log.d("data", resource.data.toString())
+                val adapter = HeadlineRecyclerViewAdapter(resource.data){
+                    onItemClick(it)
+                }
+                recyclerView.adapter = adapter
+            }
+        }
+    }
+
+
     private fun onItemClick(article: Article){
         webViewModel.setViewData(article)
         val mainNavController = Navigation.findNavController(fragment.requireActivity(), R.id.nav_host_fragment_container)
